#
# Copying instructions
#
# the STACK must be the cloud formation stack that created the S3 bucket and distribution
#

name: Sync content with S3

on:
  workflow_call:
    inputs:
      STACK:
        required: true
        type: string

env:
  AWS_ACCOUNT: ${{ vars.HELLO_PROD_AWS }} # set at org level 

jobs:
  # GitHub-Slack app sends a workflow status message with live updates to #content-* channel
  sync:
    name: Upload to Amazon S3
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:

      - name: Build role name
        run: |
          # Use shell string manipulation to extract the repository name
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          ROLE_NAME="arn:aws:iam::${AWS_ACCOUNT}:role/${REPO_NAME}-repo"
          # Set the environment variable for future steps
          echo "ROLE_NAME=${ROLE_NAME}" >> $GITHUB_ENV

      - name: Configure web-sync AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_NAME }} 
          aws-region: us-west-2

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install modules and cache
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Restore npm cache
        run: npm ci

      - name: Build content
        run: npm run build

      - name: Fetch S3 bucket name
        id: fetch-bucket-name
        run: echo "BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ inputs.STACK }} --query 'Stacks[0].Outputs[?OutputKey==`BucketNameOutput`].OutputValue' --output text)" >> $GITHUB_ENV

      - name: Tag all files in remote S3 to be deleted
        run: |
          aws s3 ls "s3://$BUCKET_NAME/" --recursive | awk '{print $4}' | while read -r KEY; do
            aws s3 cp "s3://$BUCKET_NAME/$KEY" "s3://$BUCKET_NAME/$KEY" --metadata-directive REPLACE --tagging "Delete=True"
          done

      - name: Copy local S3 dir to remote S3 bucket with the AWS CLI
        run: aws s3 sync S3/ s3://$BUCKET_NAME/

      - name: Copy localStorage.html from CDN to remote S3 bucket
        if: ${{ env.BUCKET_NAME != 'cdn-hello-coop' }}
        run: aws s3 cp s3://cdn-hello-coop/html/localStorage.html s3://$BUCKET_NAME/localStorage.html

      - name: Delete all tagged files in remote S3 bucket
        run: |
          aws s3 ls "s3://$BUCKET_NAME/" --recursive | awk '{print $4}' | while read -r KEY; do
            if [[ $(aws s3api get-object-tagging --bucket $BUCKET_NAME --key "$KEY" --query 'TagSet[?Key==`Delete`].Value' --output text) == "True" ]]; then
              aws s3 rm "s3://$BUCKET_NAME/$KEY"
            fi
          done

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${{ inputs.STACK }} --query 'Stacks[0].Outputs[?OutputKey==`DistributionIdOutput`].OutputValue' --output text)
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
