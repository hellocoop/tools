name: Stage/Beta server

# Note - the AWS Region us-west-2 is hard coded in

on:
  workflow_call:
    secrets:
      VAULT:
        required: true
    inputs:
      AWS_ACCOUNT:
        required: true
        type: string
      TARGET:
        required: true
        type: string
      DOMAIN:
        required: true
        type: string
      NODE_ENV:
        required: true
        type: string
      VAULT_CMD:
        required: true
        type: string
      HELLO_SVR:
        required: true
        type: string

jobs:
  stage:
    runs-on: hello_arm # Large Runner that we pay for by the minute that is ARM-based
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Build role name
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          ROLE_NAME="arn:aws:iam::${{inputs.AWS_ACCOUNT}}:role/${REPO_NAME}-repo"
          echo "ROLE_NAME=${ROLE_NAME}" >> $GITHUB_ENV

      - name: Configure web-sync AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_NAME }} 
          aws-region: us-west-2

      - name: Check if ECR Repository Exists
        run: |
          if aws ecr describe-repositories --repository-names hello-${{inputs.HELLO_SVR}}-arm > /dev/null 2>&1; then
            echo "Repository hello-${{inputs.HELLO_SVR}}-arm already exists."
          else
            echo "Repository hello-${{inputs.HELLO_SVR}}-arm does not exist. Exiting."
            exit 1
          fi

      - uses: docker/setup-buildx-action@v2 # Needed for caching
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET }}

      - name: Get HELLO_VERSION
        run: |
          PACKAGE_FILE="package.json"
          VERSION=$(jq -r '.version' "$PACKAGE_FILE")
          echo "HELLO_VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check repo version vs staged version
        if: ${{ github.event.inputs.TARGET == 'main' }}
        run: |
          STAGE_VERSION=$(curl -s https://${{inputs.DOMAIN}}/api/v1/version | jq -r '.VERSION')
          echo "HELLO_VERSION: $HELLO_VERSION"
          echo "STAGE_VERSION: $STAGE_VERSION"
          if [ $STAGE_VERSION = $HELLO_VERSION ]; then
            echo "$HELLO_VERSION has already been staged."
            exit 1
          fi

      - name: Get vault.json
        run: echo "${{ secrets.VAULT }}" | ${{inputs.VAULT_CMD}}

      - name: Set GIT_COMMIT to ENV
        run: |
          GIT_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})
          echo "GIT_COMMIT=${GIT_SHA_SHORT}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: svr
          push: true
          tags: |
            ${{inputs.AWS_ACCOUNT}}.dkr.ecr.us-west-2.amazonaws.com/hello-${{inputs.HELLO_SVR}}-arm:prod
            ${{inputs.AWS_ACCOUNT}}.dkr.ecr.us-west-2.amazonaws.com/hello-${{inputs.HELLO_SVR}}-arm:${{HELLO_VERSION}}
            ${{inputs.AWS_ACCOUNT}}.dkr.ecr.us-west-2.amazonaws.com/hello-${{inputs.HELLO_SVR}}-arm:${{GIT_COMMIT}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HELLO_VERSION=${{ env.HELLO_VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}

      - name: Restart ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{inputs.HELLO_SVR}}-arm \
            --service ${{inputs.HELLO_SVR}}-arm \
            --force-new-deployment
        env:
          AWS_REGION: ${{inputs.AWS_REGION}}