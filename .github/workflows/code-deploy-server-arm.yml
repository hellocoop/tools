name: Stage/Beta arm server

on:
  workflow_call:
    secrets:
      VAULT:
        required: true
    inputs:
      AWS_ACCOUNT:
        required: true
        type: string
      TARGET:
        required: true
        type: string
      DOMAIN:
        required: true
        type: string
      VAULT_CMD:
        required: true
        type: string
      HELLO_SVR:
        required: true
        type: string

jobs:
  stage:
    runs-on: hello_arm
    permissions:
      id-token: write
      contents: read
    steps:

      - name: Check repo version vs staged version
        if: ${{ github.event.inputs.TARGET == 'main' }}
        run: |
          STAGE_VERSION=$(curl -s https://${{inputs.DOMAIN}}/api/v1/version | jq -r '.VERSION')
          echo "HELLO_VERSION: $HELLO_VERSION"
          echo "STAGE_VERSION: $STAGE_VERSION"
          if [ $STAGE_VERSION = $HELLO_VERSION ]; then
            echo "$HELLO_VERSION has already been staged."
            exit 1
          fi

      - name: Set ROLE_NAME and IMAGE
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          ROLE_NAME="arn:aws:iam::${{inputs.AWS_ACCOUNT}}:role/${REPO_NAME}-repo"
          echo "ROLE_NAME=${ROLE_NAME}" >> $GITHUB_ENV
          IMAGE=hello-${{ inputs.HELLO_SVR }}-arm
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV

  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_NAME }}
          aws-region: us-west-2

      - name: Check if ECR Repository Exists
        run: |
          if aws ecr describe-repositories --repository-names ${IMAGE} > /dev/null 2>&1; then
            echo "${IMAGE} Repository exists."
          else
            echo "${IMAGE} Repository does not exist. Exiting."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET }}

      - name: Set HELLO_VERSION, GIT_COMMIT, IMAGE, ECR, and REPO_ARN
        run: |
          VERSION=$(jq -r '.version' package.json)
          GIT_SHA_SHORT=$(git rev-parse --short ${{ github.sha }})
          ECR=${{ inputs.AWS_ACCOUNT }}.dkr.ecr.${AWS_REGION}.amazonaws.com
          REPO_ARN=${ECR}/${IMAGE}
          echo "HELLO_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "GIT_COMMIT=${GIT_SHA_SHORT}" >> $GITHUB_ENV
          echo "ECR=${ECR}" >> $GITHUB_ENV
          echo "REPO_ARN=${REPO_ARN}" >> $GITHUB_ENV
  
      - name: Debug Environment Variables
        run: |
          echo "AWS_REGION=${AWS_REGION}"
          echo "HELLO_VERSION=${HELLO_VERSION}"
          echo "GIT_COMMIT=${GIT_COMMIT}"
          echo "IMAGE=${IMAGE}"
          echo "ECR=${ECR}"
          echo "REPO_ARN=${REPO_ARN}"

      - name: Get vault.json
        run: echo "${{ secrets.VAULT }}" | ${{inputs.VAULT_CMD}}

      - name: Login to Docker
        run: |
          aws ecr get-login-password --region ${AWS_REGION} | \
          docker login --username AWS --password-stdin ${ECR}
  
      - uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: svr
          push: false # docker/build-push-action@v5 does not work with push to ECR
          load: true
          tags: ${{ env.IMAGE }}:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HELLO_VERSION=${{ env.HELLO_VERSION }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
      
      - name: Push Image to ECR
        run: |
          docker tag ${IMAGE}:prod ${REPO_ARN}:prod
          docker tag ${IMAGE}:prod ${REPO_ARN}:${HELLO_VERSION}
          docker tag ${IMAGE}:prod ${REPO_ARN}:${GIT_COMMIT}
          docker push ${REPO_ARN}:prod
          docker push ${REPO_ARN}:${HELLO_VERSION}
          docker push ${REPO_ARN}:${GIT_COMMIT}

      - name: Restart ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ inputs.HELLO_SVR }}-cluster \
            --service ${{ inputs.HELLO_SVR }}-service \
            --force-new-deployment