# Uses actions/cache/restore which only restores cache / does not create one
# Caches are saved with cache.yml that runs in the main branch
# Only caches in the main branch are accessible in dev branches

name: Playwright E2E Tests

inputs:
  VAULT_JS_B64:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    # Client npm dependencies -----------------------

    - name: Restore client node_modules
      uses: actions/cache/restore@v4
      id: client-node-modules-cache
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-${{ runner.arch }}-client-node-modules-${{ hashFiles('client/package-lock.json') }}

    - name: Install client dependencies
      if: steps.client-node-modules-cache.outputs.cache-hit != 'true'
      run: cd client && npm ci
      shell: bash

    # Root npm dependencies ------------------------

    # Remove "version" from the root and "" package block, then compute SHA256 hash
    # Because we bump root package.json and dont want to lose existing valid caches
    - name: Compute hash after modifying package-lock.json
      run: |
        HASH=$(jq 'del(.version) | del(.packages[""].version)' package-lock.json | sha256sum | awk '{ print $1 }')
        echo "Computed Hash: $HASH"
        echo "HASH=$HASH" >> $GITHUB_ENV
      shell: bash

    - name: Restore root node_modules
      uses: actions/cache/restore@v4
      id: root-node-modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ runner.arch }}-root-node-modules-${{ env.HASH }}
      
    - name: Install root dependencies
      run: npm ci --ignore-scripts # Just install packages at root, skips postinstall scripts with --ignore-scripts flag
      if: steps.root-node-modules-cache.outputs.cache-hit != 'true'
      shell: bash

    # Server npm dependencies ----------------------

    - name: Restore server node_modules
      uses: actions/cache/restore@v4 # only restores / does not save cache -- we do that separately in cache.yml
      id: server-node-modules-cache
      with:
        path: ./svr/node_modules
        key: ${{ runner.os }}-${{ runner.arch }}-svr-node-modules-${{ hashFiles('svr/package-lock.json') }}
    
    - name: Install server dependencies
      if: steps.server-node-modules-cache.outputs.cache-hit != 'true'
      run: cd svr && npm ci
      shell: bash

    # Playwright -----------------------------------
    
    - name: Get installed Playwright version
      id: playwright-version
      run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
      shell: bash

    - name: Restore Playwright binaries
      uses: actions/cache/restore@v4
      id: playwright-cache 
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-${{ runner.arch }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps chromium
      shell: bash

    # Docker node image ----------------------------

    - name: Cache Node.js Docker Image
      id: cache-node-image
      uses: actions/cache/restore@v4
      with:
        path: ./node-docker-image.tar
        key: ${{ runner.os }}-${{ runner.arch }}-docker-node-18-alpine    

    - name: Load Docker image from cache
      if: steps.cache-node-image.outputs.cache-hit == 'true'
      run: docker load < ./node-docker-image.tar
      shell: bash

    - name: Pull Docker image
      if: steps.cache-node-image.outputs.cache-hit != 'true'
      run: docker pull node:18-alpine
      shell: bash

    # Docker dynamodb image ------------------------

    - name: Cache DynamoDB Docker Image
      id: cache-dynamodb-image
      uses: actions/cache/restore@v4
      with:
        path: ./dynamodb-docker-image.tar
        key: ${{ runner.os }}-${{ runner.arch }}-docker-amazon-dynamodb-local

    - name: Load Docker image from cache
      if: steps.cache-dynamodb-image.outputs.cache-hit == 'true'
      run: docker load < ./dynamodb-docker-image.tar
      shell: bash

    - name: Pull Docker image
      if: steps.cache-dynamodb-image.outputs.cache-hit != 'true'
      run: docker pull amazon/dynamodb-local
      shell: bash

    # Docker nginx image ------------------------

    - name: Cache Nginx Docker Image
      id: cache-nginx-image
      uses: actions/cache/restore@v4
      with:
        path: ./nginx-docker-image.tar
        key: ${{ runner.os }}-${{ runner.arch }}-docker-nginx-alpine

    - name: Load Docker image from cache
      if: steps.cache-nginx-image.outputs.cache-hit == 'true'
      run: docker load < ./nginx-docker-image.tar
      shell: bash

    - name: Pull Docker image
      if: steps.cache-nginx-image.outputs.cache-hit != 'true'
      run: docker pull nginx:alpine
      shell: bash

    # Test suite run --------------------------------

    - name: Get vault
      run:  echo "${{ inputs.VAULT_JS_B64 }}" | base64 --decode > svr/vault.js
      shell: bash
      
    - name: Run Playwright E2E tests
      run: npm run test:e2e:ci
      shell: bash

    # - uses: actions/upload-artifact@v4
    #   if: ${{ !cancelled() }}
    #   with:
    #     name: playwright-report
    #     path: ./playwright-report/
    #     retention-days: 30